[{"path":"https://loganjohnson0.github.io/foodRecall/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 foodRecall authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://loganjohnson0.github.io/foodRecall/articles/foodRecall.html","id":"background-and-motivation","dir":"Articles","previous_headings":"","what":"Background and Motivation","title":"Access and visualize food recall data from the Food and Drug Administration","text":"project motivated need visualization healthcare, especially food-related problems. many instances, people informed food recalls foodborne illnesses news, unclear extent severity occurrences. Likewise, many healthcare government organizations maintain extensive records food recalls related illness, software packages available visualizing types data. foodRecall package strives make analysis food recall data accessible easier read use scientists civilians alike able make informed choices regarding food safety security. R package contains code, data, documentation foodborne outbreaks happened United States recent decade. package helps highlight city, state, country, time outbreak occurred.","code":""},{"path":"https://loganjohnson0.github.io/foodRecall/articles/foodRecall.html","id":"set-up","dir":"Articles","previous_headings":"","what":"Set up","title":"Access and visualize food recall data from the Food and Drug Administration","text":"running package functions, user need API key. get API key, go openFDA API website. API key free obtain requires email address. share API key anyone.","code":"library(foodRecall)  api_key <- \"YOUR API KEY\""},{"path":"https://loganjohnson0.github.io/foodRecall/articles/foodRecall.html","id":"functions-and-applications","dir":"Articles","previous_headings":"","what":"Functions and Applications","title":"Access and visualize food recall data from the Food and Drug Administration","text":"example tabular output recalls Garden Fresh Foods Milwaukee using recall_location function recall_location function provides list food recalls designated city. Additional functionality includes ability specify inputs firm responsible recall, current status recall, distribution pattern (states/regions recall affected). One must specify API key first input. example, code display recalls time city Milwaukee company Garden-Fresh Foods, experienced many recalls, including class 1 time due contamination produce. tabular output, shown figure , includes information reason recall, description product, quantities recalled products, dates recall. One can specify columns input function desire look specifically particular group recalls. tabular format places FDA recall variables tidy, easy--read format. Map Food Recalls Milwaukee using map_recall function package provides interactive map food recalls based saved location recall_location function. inputs recall_location function displayed, including firm interest, product type, dates recalls. locations firms involved recalled products marked map red circles. Locations map can interactively sorted either number recall events given firm, total number products recalled. Darker red circles associated greater number recall incidents. zoom feature upper-left corner enables one expand narrow one’s field view. Example output recall_date function package allows user input date range dates order see types food recalls occurred within certain interval time. instance, example displays food recalls starting February 1st, 2022 ending May 7th, 2023. Input options include date recall initiation, current status recall, distribution pattern recall. makes easy efficient see status current past recalls might impact within certain range time. One current limitation, however, provide visually appealing tabular graphical format similar aforementioned packages. However, beneficial looking single recall time period interest.","code":"# Get food recall locations  location <- foodRecall::recall_location(api_key = api_key,                                         city = \"Milwaukee\",                                         state = \"Wisconsin\",                                         recalling_firm = \"Garden-Fresh Foods\") # Map food recall locations  map <- foodRecall::map_recall(data = location) # Working with food recall dates  date <- foodRecall::recall_date(api_key = api_key,                                 recall_initiation_date = \"2023-01-01\",                                 status = \"Ongoing\")"},{"path":"https://loganjohnson0.github.io/foodRecall/articles/foodRecall.html","id":"shiny-application","dir":"Articles","previous_headings":"","what":"Shiny application","title":"Access and visualize food recall data from the Food and Drug Administration","text":"run package’s Shiny Application, use following code: open graphical user interface appears follows: Example shiny app user interface Now, want look recall data city specified Miami, state Florida, end following table tab: Example shiny app tabular data Miami, Florida Output appears follows “Map” tab: Map Miami, Florida food recalls FDA database* “Date” tab allows one input recall initiation date firm choice, along product description status recalls, desired. example ongoing recalls since January 1st, 2023. Current Ongoing Recalls initiating January 1st, 2023 visualize ongoing recalls since January 1st, 2023 map, select “Map2” tab. Map Ongoing Recalls initiating January 1st, 2023 shiny app provides easy, efficient method working FDA data without significant knowledge R programming. Anyone basic knowledge user interfaces web applications able use application track food recalls across United States.","code":"foodRecall::runExample()"},{"path":"https://loganjohnson0.github.io/foodRecall/articles/foodRecall.html","id":"limitations","dir":"Articles","previous_headings":"","what":"Limitations","title":"Access and visualize food recall data from the Food and Drug Administration","text":"Currently, package provides information relating food recalls. future, beneficial expand package include foodborne illness statistics across globe, due fact many food recalls initiated outbreaks foodborne diseases. manner, easy efficient compare illness rates foodborne diseases different countries. Furthermore, possible track, model, predict spread foodborne illnesses move nation nation, lead early government intervention containing spread various illnesses. One complication , however, global database require combination analysis large number datasets. Due , fact many nations consistently track disease statistics, quite ambitious.","code":""},{"path":"https://loganjohnson0.github.io/foodRecall/articles/foodRecall.html","id":"future-work","dir":"Articles","previous_headings":"","what":"Future Work","title":"Access and visualize food recall data from the Food and Drug Administration","text":"future, optimal try combine package information, agricultural data United States Department Agriculture (USDA). One original ideas project dealt analyzing crop progress data USDA’s National Agricultural Statistics Service (NASS). service provides information statistics crop planting, germination, harvest, etc. Many foodborne illness outbreaks initiate bacteria, fungi, insects emerge certain crop development stages. food-borne illness crop progress statistics combined analyzed together package, much easier organizations FDA predict severity food-borne illnesses develop measures prevention. also useful tool farmers others whose work entails key role prevention diseases, application herbicides agricultural chemicals. Additional agricultural statistics livestock facilities combined data sets order provide complete picture livestock yields time impacted rates foodborne illnesses salmonella. Another possibility future improvement package addition feature enables users track areas featured origin food-borne illnesses. high-risk areas can identified simply keeping count number cases certain disease time, easy pinpoint many diseases originating prevent spread diseases. Essentially, expansions package enable governmental organizations work together joint projects relating food safety. Finally, additional functionality created allows combination food-borne illness data disease related data. sense, useful healthcare professionals treating illnesses may interested treatment options rather origin disease. Hence, useful develop functionality regards symptoms symptom severity relates diseases interest.","code":""},{"path":"https://loganjohnson0.github.io/foodRecall/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Logan Johnson. Author, maintainer. Kelly Nascimento Thompson. Author. Matthew Kavanaugh. Author. Charchit Shukla. Author.","code":""},{"path":"https://loganjohnson0.github.io/foodRecall/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Johnson L, Nascimento Thompson K, Kavanaugh M, Shukla C (2024). foodRecall: Extracts Visualizes Food Recall Data. R package version 0.1.0, https://loganjohnson0.github.io/foodRecall/, https://github.com/loganjohnson0/foodRecall.","code":"@Manual{,   title = {foodRecall: Extracts and Visualizes Food Recall Data},   author = {Logan Johnson and Kelly {Nascimento Thompson} and Matthew Kavanaugh and Charchit Shukla},   year = {2024},   note = {R package version 0.1.0,     https://loganjohnson0.github.io/foodRecall/},   url = {https://github.com/loganjohnson0/foodRecall}, }"},{"path":[]},{"path":"https://loganjohnson0.github.io/foodRecall/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Extracts and Visualizes Food Recall Data","text":"","code":"# install.packages(\"devtools\") library(devtools)  devtools::install_github(\"loganjohnson0/foodRecall\")  library(foodRecall)"},{"path":"https://loganjohnson0.github.io/foodRecall/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Extracts and Visualizes Food Recall Data","text":"use package, must register API key openFDA website. free API key requires email address. receive immediately upon request. Upon issues API key , please contact openFDA office. sure share API key anyone! product uses openFDA API endorsed certified Food Drug Administration.","code":""},{"path":"https://loganjohnson0.github.io/foodRecall/index.html","id":"save-your-api-key","dir":"","previous_headings":"","what":"Save Your API Key","title":"Extracts and Visualizes Food Recall Data","text":"developed different functions search different kinds data. can use either recall_location recall_date search data food recalls. See notation example. can also map resulting data see location recall events, impact recall, number recall events individual products recalling firm recalled. basic output map_recall function. output interactive map leaflet include detailed descriptions map.  Check back additional updates plan add soon!","code":"api_key <- \"YOUR API KEY\" location <- foodRecall::recall_location(api_key = api_key,                                          city = \"Ames\",                                          state = \"Iowa\")  date <- foodRecall::recall_date(api_key = api_key,                                 report_date = \"January 2023 to May 2023\") foodRecall::map_recall(data = df)"},{"path":"https://loganjohnson0.github.io/foodRecall/reference/adverse_events.html","id":null,"dir":"Reference","previous_headings":"","what":"This function scrapes the openFDA API for food, dietary supplement, and cosmetic adverse event reports — adverse_events","title":"This function scrapes the openFDA API for food, dietary supplement, and cosmetic adverse event reports — adverse_events","text":"function scrapes openFDA API food, dietary supplement, cosmetic adverse event reports","code":""},{"path":"https://loganjohnson0.github.io/foodRecall/reference/adverse_events.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function scrapes the openFDA API for food, dietary supplement, and cosmetic adverse event reports — adverse_events","text":"","code":"adverse_events(   api_key,   consumer.gender = NULL,   consumer.age = NULL,   consumer.age_unit = NULL,   date_created = NULL,   date_started = NULL,   limit = NULL,   outcomes = NULL,   products.name_brand = NULL,   products.industry_name = NULL,   products.industry_code = NULL,   reactions = NULL,   report_number = NULL,   search_mode = NULL )"},{"path":"https://loganjohnson0.github.io/foodRecall/reference/adverse_events.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function scrapes the openFDA API for food, dietary supplement, and cosmetic adverse event reports — adverse_events","text":"api_key free api key openFDA website consumer.gender way FDA classifies date consumer.age Description product consumer.age_unit Date recall initiated date_created company recalling product date_started date FDA issued enforcement report product recall limit number rows return query outcomes gives user flexibility search exact matches inputs combination inputs products.name_brand status recall products.industry_name date recall terminated products.industry_code date recall terminated reactions date recall terminated report_number date recall terminated search_mode way search data","code":""},{"path":"https://loganjohnson0.github.io/foodRecall/reference/adverse_events.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function scrapes the openFDA API for food, dietary supplement, and cosmetic adverse event reports — adverse_events","text":"data frame returned results users query API","code":""},{"path":"https://loganjohnson0.github.io/foodRecall/reference/adverse_events.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"This function scrapes the openFDA API for food, dietary supplement, and cosmetic adverse event reports — adverse_events","text":"","code":"if (FALSE) { # \\dontrun{ adverse_events(api_key = api_key, outcomes = \"Hospitalization\", date_created = \"2020\") adverse_events(api_key = api_key, products.industry_name = \"Food\", date_started = \"2021\") adverse_events(api_key = api_key, products.name_brand = \"Lucky Charms\") } # }"},{"path":"https://loganjohnson0.github.io/foodRecall/reference/map_recall.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for getting lat and long data from addresses — map_recall","title":"Function for getting lat and long data from addresses — map_recall","text":"Function getting lat long data addresses","code":""},{"path":"https://loganjohnson0.github.io/foodRecall/reference/map_recall.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for getting lat and long data from addresses — map_recall","text":"","code":"map_recall(data)"},{"path":"https://loganjohnson0.github.io/foodRecall/reference/map_recall.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function for getting lat and long data from addresses — map_recall","text":"data dataframe used input addresses map latitude longitudinally","code":""},{"path":"https://loganjohnson0.github.io/foodRecall/reference/recall_date.html","id":null,"dir":"Reference","previous_headings":"","what":"This function scrapes the openFDA API for food product recall enforcement reports based on user inputs of date and time — recall_date","title":"This function scrapes the openFDA API for food product recall enforcement reports based on user inputs of date and time — recall_date","text":"function scrapes openFDA API food product recall enforcement reports based user inputs date time","code":""},{"path":"https://loganjohnson0.github.io/foodRecall/reference/recall_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function scrapes the openFDA API for food product recall enforcement reports based on user inputs of date and time — recall_date","text":"","code":"recall_date(   api_key,   center_classification_date = NULL,   limit = NULL,   product_description = NULL,   recall_initiation_date = NULL,   recalling_firm = NULL,   report_date = NULL,   search_mode = NULL,   status = NULL,   termination_date = NULL )"},{"path":"https://loganjohnson0.github.io/foodRecall/reference/recall_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function scrapes the openFDA API for food product recall enforcement reports based on user inputs of date and time — recall_date","text":"api_key free api key FDA website center_classification_date way FDA classifies date limit number rows return query product_description Description product recall_initiation_date Date recall initiated recalling_firm company recalling product report_date date FDA issued enforcement report product recall search_mode gives user flexibility search exact matches inputs combination inputs status status recall termination_date date recall terminated","code":""},{"path":"https://loganjohnson0.github.io/foodRecall/reference/recall_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function scrapes the openFDA API for food product recall enforcement reports based on user inputs of date and time — recall_date","text":"data frame returned results users query API","code":""},{"path":[]},{"path":"https://loganjohnson0.github.io/foodRecall/reference/recall_location.html","id":null,"dir":"Reference","previous_headings":"","what":"This function scrapes the openFDA API for food product recall enforcement reports based on user inputs of location — recall_location","title":"This function scrapes the openFDA API for food product recall enforcement reports based on user inputs of location — recall_location","text":"function scrapes openFDA API food product recall enforcement reports based user inputs location","code":""},{"path":"https://loganjohnson0.github.io/foodRecall/reference/recall_location.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function scrapes the openFDA API for food product recall enforcement reports based on user inputs of location — recall_location","text":"","code":"recall_location(   api_key,   limit = NULL,   city = NULL,   country = NULL,   distribution_pattern = NULL,   recalling_firm = NULL,   search_mode = NULL,   state = NULL,   status = NULL )"},{"path":"https://loganjohnson0.github.io/foodRecall/reference/recall_location.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function scrapes the openFDA API for food product recall enforcement reports based on user inputs of location — recall_location","text":"api_key free api key openFDA API website limit number rows return query city City food company located country country food produced distribution_pattern Locations food distributed recalling_firm company recalling product search_mode gives user flexibility search exact matches inputs combination inputs state U.S. state recalling firm located status status recall","code":""},{"path":"https://loganjohnson0.github.io/foodRecall/reference/recall_location.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function scrapes the openFDA API for food product recall enforcement reports based on user inputs of location — recall_location","text":"data frame returned results users query API","code":""},{"path":"https://loganjohnson0.github.io/foodRecall/reference/recall_location.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"This function scrapes the openFDA API for food product recall enforcement reports based on user inputs of location — recall_location","text":"","code":"if (FALSE) { # \\dontrun{ recall_location(api_key = api_key, city = \"Ames\", state = \"Iowa\") recall_location(api_key = api_key, recalling_firm = \"Target\") recall_location(api_key = api_key, distribution_pattern = \"Colorado\", status = \"Ongoing\") recall_location(api_key = api_key, city = \"Iowa City, Ames, Des Moines\", state = \"Iowa\") } # }"},{"path":"https://loganjohnson0.github.io/foodRecall/reference/runExample.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to run the shiny app — runExample","title":"Function to run the shiny app — runExample","text":"Function run shiny app","code":""},{"path":"https://loganjohnson0.github.io/foodRecall/reference/runExample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to run the shiny app — runExample","text":"","code":"runExample(x)"},{"path":"https://loganjohnson0.github.io/foodRecall/reference/runExample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to run the shiny app — runExample","text":"x shiny app run","code":""}]
